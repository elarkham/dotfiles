#!/bin/bash
##Ethan Larkham
##Last Updated: Mar 01 2015

# configuration variables
refresh_rate=0.1                     # how often will the bar update
datefmt="%d %b %I:%M:%S"             # date time format
maildir=/home/ethan/mail/INBOX/new/  # where do new mails arrive ?
alsactl=Master                       # which alsa channel to display

# find battery name in a stupid way
battery1=$(ls /sys/class/power_supply | grep BAT1)
battery2=$(ls /sys/class/power_supply | grep BAT0)

barch=''
barfg='%{F#ff888888}'
barmg='%{F#ffffffff}'
barbg='%{F#00838996}'
red="%{F#ffFF0000}"
green="%{F#ff33CC33}"


clock() {
    date "+${datefmt}"
}

mails() {
    fcount ${maildir}
}

muted() {
    amixer get $alsactl | grep -o '\[off\]' >/dev/null && false || true
}

volume() {
    amixer get $alsactl | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p' | uniq
}

batteryCapacity() {
    BATC=/sys/class/power_supply/${battery1}/capacity
    if [[ $(cat $BATC) -lt 7 ]]; then
        BATC=/sys/class/power_supply/${battery2}/capacity
    fi
    cat $BATC
}

batteryStatus() {
    BATS=/sys/class/power_supply/${battery1}/status
    BATC=/sys/class/power_supply/${battery1}/capacity

    batCol=${barfg}

    if [[ $(cat $BATC) -lt 7 ]]; then
        BATC=/sys/class/power_supply/${battery2}/capacity
        BATS=/sys/class/power_supply/${battery2}/status
        batCol="$green"
    fi

    #Charging ( Second Battery displays UNKOWN when full )
    if [[ "$(cat $BATS)" == "Unknown" ||
          "$(cat $BATS)" == "Charging" ]]; then
        echo "${barmg} ${batCol}"
    #Less then 10
    elif [[ "$(cat $BATC)" -lt 10 ]]; then
        echo "${red} ${batCol}"
    #Less then 50
    elif [[ "$(cat $BATC)" -lt 50 ]]; then
        echo "${barmg} ${batCol}"
    #Discharging from 100 < x < 50
    elif [[ "$(cat $BATS)" == "Discharging" ]]; then
        echo "${barmg} ${batCol}"
    fi
}

cpuload() {
    LINE=`ps -eo pcpu |grep -vE '^\s*(0.0|%CPU)' |sed -n '1h;$!H;$g;s/\n/ +/gp'`
    echo `bc <<< $LINE`
}

memused() {
    read t f <<< `grep -E 'Mem(Total|Free)' /proc/meminfo |awk '{print $2}'`
    read b c <<< `grep -E '^(Buffers|Cached)' /proc/meminfo |awk '{print $2}'`
    bc <<< "100 * ($t - $f - $c - $b) / $t"
}

netstate() {
    test -n "`ip route`" && echo "connected" ||
                            echo "disconnected"
}


netip() {
    case $1 in
        local)
            # local ip
            ip addr show "$(getActiveNetDevice)" |
            grep 'inet ' |
            awk '{print $2}'
            ;;
        *)
            # extern ip
            cat "$HOME/var/externalip"
            ;;
    esac
}


nowplaying() {
    cur="$(mpc current)"
    if test -n "$(mpc current)"; then
        echo "$cur"
    else
        echo "- stopped -"
    fi
}

muted() {
    amixer get $alsactl | grep -o '\[off\]' >/dev/null && false || true
}

volume() {
    amixer get $alsactl | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p' | uniq
}

volumeStatus() {

    if [[ "$(volume)" -lt 1 ]]; then
        echo "${barmg} "
    elif [[ "$(volume)" -lt 25 ]]; then
        echo "${barmg} "
    elif [[ "$(volume)" -lt 50 ]]; then
        echo "${barmg} "
    elif [[ "$(volume)" -lt 100 ]]; then
        echo "${barmg} "
    else
        echo "${red} "
    fi
}

getDevice() {
    if [[ "$(getActiveNetDevice)" == "$(getWired)" ]]; then
        ESSID="( wired )"
        CONNECTION_ICON=""
    elif [[ "$(getActiveNetDevice)" == "$(getWifi)" ]]; then
        ESSID=$(iwconfig "$(getWifi)" |  awk -F '"' 'NR==1 {print $2}')
        CONNECTION_ICON=""
    else
        ICON=""
    fi
}

while :; do
    getDevice

    buf="${buf}%{l} "
    buf="${buf}${barmg}$CONNECTION_ICON ${barfg}$ESSID"
    buf="${buf}${barmg}   ${barfg}$(netip local)"
    buf="${buf}${barmg} ${barfg}$(netip)    "

    buf="${buf}%{r}"
    buf="${buf}${barmg}${barfg} $(checkupdates | wc -l)    "
    buf="${buf}${barmg}${barfg} $(mails)"

    buf="${buf}$(volumeStatus)${barfg} $(volume)%%"

    # Show battery status if there is a battery
    test -n "${battery1}" &&
        buf="${buf}$(batteryStatus) $(batteryCapacity)"'%%'

    buf="${buf}${barmg} ${barfg} $(clock)  "
    echo $buf
    buf=""
    #sleep ${refresh_rate}
done
